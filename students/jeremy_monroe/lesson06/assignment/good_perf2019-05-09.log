Ok, this is good_perf copied straight from poor_perf all I've added is logging
up to this point so I'll base improvements off these initial numbers.

2019-05-09 18:07:33,517 good_perf.py:53  INFO
Time to generate csv reader: 0:00:00

2019-05-09 18:07:37,631 good_perf.py:64  INFO
Time to generate new_ones list: 0:00:04.113965

2019-05-09 18:07:38,822 good_perf.py:90  INFO
Time to populate year_count dict: 0:00:01.190815

2019-05-09 18:07:42,473 good_perf.py:107 INFO
Time taken: 0:00:08.956013

########################################################
--------------------------------------------------
########################################################

First modification was to remove new_ones list creation and populate year_count

dict all in one go. I shaved around 1.5 seconds off with this.

2019-05-09 18:24:28,127 good_perf.py:56  INFO
Time to generate csv reader: 0:00:00

2019-05-09 18:24:32,008 good_perf.py:98  INFO
Time to populate year_count dict: 0:00:03.880643

2019-05-09 18:24:35,626 good_perf.py:115 INFO
Total time taken: 0:00:07.498962

########################################################
--------------------------------------------------
########################################################

I tried running good_perf using pypy3. Interestingly enough it took
significantly longer. I believe this is because none of my code is factored out
into functions.

2019-05-09 18:43:11,992 good_perf.py:56  INFO
Time to generate csv reader: 0:00:00.001995

2019-05-09 18:43:29,664 good_perf.py:98  INFO
Time to populate year_count dict: 0:00:17.671807

2019-05-09 18:43:47,369 good_perf.py:115 INFO
Total time taken: 0:00:35.378375

########################################################
--------------------------------------------------
########################################################
